/*import styles from '@/styles/Home.module.css'*/
import Head from "next/head"
import {getMovieData, getTenMovies} from "@/API/ombdApi";

import {IMovieList, IMovieLists, ISearchResult} from "@/interfaces/interfaces";
import MovieList from "@/components/home/movieList";
import {ChangeEvent, FormEvent, useEffect, useState} from "react";
import {set} from "immutable";
import {getMovieFromOpenAI, OpenAiResponse, OpenAiSuccess, OpenAiUnSuccess} from "@/API/openAIApi";
import MovieCard from "@/components/movie/movieCard";


export default function ListMovies({movieLists}: IMovieLists) {
    const [searchText, setSearchText] = useState<string>("")
    const [isLoading, setLoading] = useState<boolean>(false)
    const [alertBox, setAlertBox] = useState({
        show:false,
        message: ""
    })
    const [recommendedMovie,setRecommendedMovie] = useState({show:false})


    const handleSubmit = async (e: FormEvent<HTMLFormElement>) =>{
        e.preventDefault()
        try {
            setLoading(true)

            const openAiResponse: OpenAiResponse = await getMovieFromOpenAI(searchText);
console.log(openAiResponse)
            if (openAiResponse.success && "title" in openAiResponse) {
                const recommendedMovieData = await getMovieData( openAiResponse.title )

                if (typeof recommendedMovieData === 'string'){
                    throw new Error (recommendedMovieData)
                }

                setRecommendedMovie({show: true, ...recommendedMovieData})

            } else if ("message" in openAiResponse) {
                throw new Error(openAiResponse.message)
            }
        }
        catch (error: any){
            setAlertBox({show: true, message: error.message})
        }
        finally {
            setLoading(false)
        }
    }

    const handleChange = (e:  ChangeEvent<HTMLInputElement>) => {
        setSearchText(e.target.value)
    }

    useEffect(() => {
        if (alertBox.show) {
            setTimeout(() => {
                setAlertBox({...alertBox, show: false});
            }, 10000);
        }
    }, [alertBox]);

//todo use template from figma
    return (
        <>
            <Head>
                <title>Movie Library with OpenAI helper</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>

            <main>
                <h1>Movie library </h1>
                <h2>powered by GPT-3</h2>

                <form onSubmit={handleSubmit}>
                        <label htmlFor="search">Type what you want to see to AI</label>
                    {/*todo use microphone with speach recognition*/}
                        <input
                            type="text"
                            id="search"
                            name="search"
                            placeholder='e.g. sci-fi movie about travels and imdb more than 7'
                            onChange={handleChange}
                        />

                    <button type={'submit'} disabled={isLoading || searchText.trim().length===0 }>
                        { isLoading ? "Loading..." : "Recommend" }
                    </button>
                </form>

                {alertBox.show && (
                    <div style={{ background: "red", color: "white", padding: "10px" }}>
                        {alertBox.message}
                    </div>
                )}

                {recommendedMovie.show && <MovieCard currentMovie={recommendedMovie} />}

                {movieLists.map(
                    (movieList: IMovieList, index: number) =>
                        <MovieList key={index} title={movieList.title} movies={movieList.movies}/>
                )}
            </main>
        </>
    )
}


export async function getStaticProps() {
    const tenMoviesStar: ISearchResult[] | string = await getTenMovies(1, 'star')
    const tenMoviesCat: ISearchResult[] | string = await getTenMovies(1, 'cat')

    const MoviesAboutStar: IMovieList = {
        title: 'Star',
        movies: tenMoviesStar
    }

    const MoviesAboutCat: IMovieList = {
        title: 'Cat',
        movies: tenMoviesCat
    }

    return {
        props: {
            movieLists: [
                MoviesAboutStar,
                MoviesAboutCat
            ]
        },
        revalidate: 3600 // revalidate if there are requests
    };
}
